{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["StarsDisplay","props","utils","range","count","map","starId","className","PlayNumber","style","backgroundColor","colors","status","onClick","number","PlayAgain","color","gameStatus","Game","timeLimit","useState","random","stars","setStars","availableNums","setAvailableNums","candidateNums","setCandidateNums","secondsLeft","setSecondsLeft","useEffect","length","timerId","setTimeout","clearTimeout","setGameState","newCandidateNums","sum","newAvailableNums","filter","n","includes","randomSumIn","useGameState","candidatesAreWrong","numberStatus","onNumberClick","currentStatus","concat","cn","startNewGame","available","used","wrong","candidate","arr","reduce","acc","curr","min","max","Array","from","_","i","Math","floor","sets","sums","j","len","candidateSet","candidateSum","push","StarMatch","gameId","setGameId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea44092a.chunk.js","sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\nconst StarsDisplay = props => (\n  <>\n    {utils.range(1, props.count).map(starId => (\n      <div key={starId} className=\"star\" />\n    ))}\n  </>\n);\n\nconst PlayNumber = props => (\n  <button\n    className=\"number\"\n    style={{backgroundColor: colors[props.status]}}\n    onClick={() => props.onClick(props.number, props.status)}\n  >\n    {props.number}\n  </button>\n);\n\nconst PlayAgain = props => (\n\t<div className=\"game-done\">\n  \t<div \n    \tclassName=\"message\"\n      style={{ color: props.gameStatus === 'lost' ? 'red' : 'green'}}\n    >\n  \t  {props.gameStatus === 'lost' ? 'Game Over' : 'Nice'}\n  \t</div>\n\t  <button onClick={props.onClick}>Play Again</button>\n\t</div>\n);\n\nconst useGameState = timeLimit => {\n  const [stars, setStars] = useState(utils.random(1, 9));\n  const [availableNums, setAvailableNums] = useState(utils.range(1, 9));\n  const [candidateNums, setCandidateNums] = useState([]);\n  const [secondsLeft, setSecondsLeft] = useState(10);\n\n  useEffect(() => {\n    if (secondsLeft > 0 && availableNums.length > 0) {\n      const timerId = setTimeout(() => setSecondsLeft(secondsLeft - 1), 1000);\n      return () => clearTimeout(timerId);\n    }\n  });\n\n  const setGameState = (newCandidateNums) => {\n    if (utils.sum(newCandidateNums) !== stars) {\n\t\t\tsetCandidateNums(newCandidateNums);\n    } else {\n      const newAvailableNums = availableNums.filter(\n        n => !newCandidateNums.includes(n)\n      );\n      setStars(utils.randomSumIn(newAvailableNums, 9));\n      setAvailableNums(newAvailableNums);\n      setCandidateNums([]);\n    }\n  };\n\n  return { stars, availableNums, candidateNums, secondsLeft, setGameState };\n};\n\nconst Game = props => {\n  const {\n    stars,\n    availableNums,\n    candidateNums,\n    secondsLeft,\n    setGameState,\n  } = useGameState();\n\n  const candidatesAreWrong = utils.sum(candidateNums) > stars;\n  const gameStatus = availableNums.length === 0 \n  \t? 'won'\n    : secondsLeft === 0 ? 'lost' : 'active'\n\n  const numberStatus = number => {\n    if (!availableNums.includes(number)) {\n      return 'used';\n    }\n\n    if (candidateNums.includes(number)) {\n      return candidatesAreWrong ? 'wrong' : 'candidate';\n    }\n\n    return 'available';\n  };\n\n  const onNumberClick = (number, currentStatus) => {\n    if (currentStatus === 'used' || secondsLeft === 0) {\n      return;\n    }\n\n    const newCandidateNums =\n      currentStatus === 'available'\n        ? candidateNums.concat(number)\n        : candidateNums.filter(cn => cn !== number);\n\n    setGameState(newCandidateNums);\n  };\n\n  return (\n    <div className=\"game\">\n      <div className=\"help\">\n        Pick 1 or more numbers that sum to the number of stars\n      </div>\n      <div className=\"body\">\n        <div className=\"left\">\n          {gameStatus !== 'active' ? (\n          \t<PlayAgain onClick={props.startNewGame} gameStatus={gameStatus} />\n          ) : (\n          \t<StarsDisplay count={stars} />\n          )}\n        </div>\n        <div className=\"right\">\n          {utils.range(1, 9).map(number => (\n            <PlayNumber\n              key={number}\n              status={numberStatus(number)}\n              number={number}\n              onClick={onNumberClick}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"timer\">Time Remaining: {secondsLeft}</div>\n    </div>\n  );\n};\n\nconst StarMatch = () => {\n\tconst [gameId, setGameId] = useState(1);\n\treturn <Game key={gameId} startNewGame={() => setGameId(gameId + 1)}/>;\n}\n\n// Color Theme\nconst colors = {\n  available: 'lightgray',\n  used: 'lightgreen',\n  wrong: 'lightcoral',\n  candidate: 'deepskyblue',\n};\n\n// Math science\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({length: max - min + 1}, (_, i) => min + i),\n\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n    return sums[utils.random(0, sums.length - 1)];\n  },\n};\n\n\nexport default StarMatch;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}